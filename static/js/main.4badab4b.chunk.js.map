{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","TodoList","todos","map","getUserById","userId","usersFromServer","find","App","useState","newPost","setNewPost","setTitle","titleErr","setTitleErr","setUserId","userIdErr","setUserIdErr","maxId","reduce","max","action","method","onSubmit","event","preventDefault","trim","length","newTodo","currMovies","addPost","type","placeholder","value","onChange","newTitle","target","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4badab4b.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/interface';\n\ntype TypeUserInfo = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<TypeUserInfo> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/interface';\n\ntype TodoInfoProps = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  const { completed, title, user } = todo;\n\n  return (\n    <article\n      className={`TodoInfo ${completed && 'TodoInfo--completed'}`}\n      data-id={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/interface';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        todo={todo}\n        key={todo.id}\n      />\n    ))}\n  </section>\n);\n","import './App.scss';\n\nimport React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/interface';\n\nfunction getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === +userId)\n    || null;\n}\n\nexport const todos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [newPost, setNewPost] = useState<Todo[]>(todos);\n\n  const [title, setTitle] = useState('');\n  const [titleErr, setTitleErr] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [userIdErr, setUserIdErr] = useState(false);\n\n  const maxId = newPost\n    .reduce((max, todo) => (todo.id > max ? todo.id : max), 0) + 1;\n\n  const addPost = ({ newTodo }: { newTodo: Todo; }) => {\n    setNewPost(currMovies => [...currMovies, newTodo]);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = event.target.value\n      .replace(/[^A-Za-z0-9\\u0400-\\u04FF\\s]/g, '');\n\n    setTitle(newTitle);\n    setTitleErr(false);\n  };\n\n  const handleUserIdChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setUserIdErr(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (title.trim().length === 0 || !userId) {\n      if (title.trim().length === 0) {\n        setTitleErr(true);\n      }\n\n      if (!userId) {\n        setUserIdErr(true);\n      }\n\n      return;\n    }\n\n    addPost({\n      newTodo: {\n        id: maxId,\n        title,\n        completed: false,\n        userId,\n        user: getUserById(userId),\n      },\n    });\n\n    setTitle('');\n    setUserId(0);\n    setTitleErr(false);\n    setUserIdErr(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        className=\"box Todo__form\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n\n          {titleErr && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleUserIdChange}\n          >\n            <option value=\"0\">Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userIdErr && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n\n        <TodoList todos={newPost} />\n      </form>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}